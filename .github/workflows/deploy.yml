# .github/workflows/deploy.yml

name: CI/CD Pipeline - Build, Push, and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push backend image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastreact-backend:latest

    - name: Build and push frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastreact-frontend:latest

  deploy-to-droplet:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to DigitalOcean Droplet
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DO_DROPLET_IP }}
        username: ${{ secrets.DO_SSH_USER }}
        key: ${{ secrets.DO_SSH_KEY }}
        script: |
          # Navigate to the project directory
          cd fastreactapp
          
          # Update the repository code from GitHub
          git pull origin main
          
          # --- Create/Update Environment Files ---
          # 1. Create the .env.prod file from GitHub Secrets
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env.prod
          echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env.prod
          echo "GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}" >> .env.prod
          echo "GOOGLE_APPLICATION_CREDENTIALS=/app/google-credentials.json" >> .env.prod
          echo "CELERY_BROKER_URL=redis://redis:6379/0" >> .env.prod
          echo "CELERY_RESULT_BACKEND=redis://redis:6379/0" >> .env.prod
          
          # 2. Your manually placed google-credentials.json will be preserved.
          
          # --- Deploy with Docker Compose ---
          # Login to Docker Hub on the server
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          
          # Pull the latest images from Docker Hub using the production file
          docker compose -f docker-compose.prod.yml pull
          
          # Restart services with new images, forcing recreation to apply changes
          docker compose -f docker-compose.prod.yml up -d --force-recreate
          
          # Clean up old, unused Docker images to save space
          docker image prune -f